{
  "address": "0xe2285fB2D5FDB88D30BfE8eBE2024C29210f604f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "player",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44b9daa966ca5346e8c2f2503fc428f3b232a5d4ede494f4b3e87d9ef21bf0dd",
  "receipt": {
    "to": null,
    "from": "0xE04bD9A06ced11fE1aE887377Ca38B6A4B0B895F",
    "contractAddress": "0xe2285fB2D5FDB88D30BfE8eBE2024C29210f604f",
    "transactionIndex": 107,
    "gasUsed": "1287984",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x274ce6bd8851d3a2af0640f153dcdd36a7824630f5209b14282cb54c670b0f15",
    "transactionHash": "0x44b9daa966ca5346e8c2f2503fc428f3b232a5d4ede494f4b3e87d9ef21bf0dd",
    "logs": [],
    "blockNumber": 8224878,
    "cumulativeGasUsed": "16175373",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "0",
    "5000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "c5d05be889ab5b403b1de7c1433efbbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"player\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Roberto Iturralde\",\"details\":\"This implements Chainlink's VRF and Chainlink Automation\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Chainlink Keeper function that verifies if upkeep is neededWhen upkeep is needed, it will call performUpkeepupkeep needed once all of these are TRUE:1. s_raffleState is 'OPEN'2. Time passed is greater than interval3. There's players in the raffle4. There's balance in the contract\"}},\"title\":\"A sample Raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable raffle smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\n/**@title A sample Raffle contract\\n * @author Roberto Iturralde\\n * @notice This contract is for creating an untamperable raffle smart contract\\n * @dev This implements Chainlink's VRF and Chainlink Automation\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    } // 0 = OPEN, 1 = CALCULATING\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    //Lottery variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address winner);\\n\\n    constructor(\\n        uint256 entranceFee,\\n        address vrfCoordinatorV2, //contract address\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEthEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**@dev Chainlink Keeper function that verifies if upkeep is needed\\n     * @dev When upkeep is needed, it will call performUpkeep\\n     * @dev upkeep needed once all of these are TRUE:\\n     * @dev 1. s_raffleState is 'OPEN'\\n     * @dev 2. Time passed is greater than interval\\n     * @dev 3. There's players in the raffle\\n     * @dev 4. There's balance in the contract\\n     */\\n    function checkUpkeep(\\n        bytes memory /*checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /* performData*/) {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, //gas lane\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 player) public view returns (address) {\\n        return s_players[player];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n}\\n\",\"keccak256\":\"0x007fbe37016238f8d99ea59f902d5dd7956748e828fc1625f77720547105ba2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019b0380380620019b08339818101604052810190620000389190620002a0565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b6000819050919050565b62000154816200013f565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a7826200017a565b9050919050565b620001b9816200019a565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a0162000163565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a0162000163565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516115bb620003f56000396000818161087201526108e00152600081816107210152610930015260006106fe0152600081816106dd0152610908015260006106a101526000818161037601526104730152600081816103b3015261040701526115bb6000f3fe6080604052600436106100e85760003560e01c806353a2c19a1161008a578063c19dd76b11610059578063c19dd76b146102b4578063de8be8e7146102df578063e55ae4e81461030a578063fd6673f514610347576100e8565b806353a2c19a146101f55780635f1b0fd8146102205780636e04ff0d1461024b57806391ad27b414610289576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063473f1ddc146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610c8c565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a9190610d1e565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610ed2565b6103b1565b005b610174610471565b005b34801561018257600080fd5b5061018b6105e0565b6040516101989190610c8c565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f89565b6105ea565b005b3480156101d657600080fd5b506101df6107e9565b6040516101ec9190611017565b60405180910390f35b34801561020157600080fd5b5061020a610813565b6040516102179190610c8c565b60405180910390f35b34801561022c57600080fd5b50610235610822565b6040516102429190610c8c565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d91906110e7565b61082f565b6040516102809291906111d3565b60405180910390f35b34801561029557600080fd5b5061029e6108dc565b6040516102ab9190610c8c565b60405180910390f35b3480156102c057600080fd5b506102c9610904565b6040516102d6919061121c565b60405180910390f35b3480156102eb57600080fd5b506102f461092c565b6040516103019190611256565b60405180910390f35b34801561031657600080fd5b50610331600480360381019061032c9190611271565b610954565b60405161033e9190611017565b60405180910390f35b34801561035357600080fd5b5061035c61099b565b6040516103699190610c8c565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045a92919061129e565b60405180910390fd5b61046d82826109a7565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104cb576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104df576104de610ca7565b5b600160149054906101000a900460ff16600181111561050157610500610ca7565b5b14610538576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006106046040518060200160405280600081525061082f565b509050806106735747600080549050600160149054906101000a900460ff16600181111561063557610634610ca7565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161066a939291906112c7565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561069857610697610ca7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076295949392919061133e565b602060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906113a6565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085757610856610ca7565b5b6000600181111561086b5761086a610ca7565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261089f9190611402565b119050600080600080549050119050600080471190508380156108bf5750825b80156108c85750815b80156108d15750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061096957610968611436565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109c2576109c1611436565b5b60200260200101516109d49190611494565b905060008082815481106109eb576109ea611436565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a7f57610a7e610ca7565b5b0217905550600067ffffffffffffffff811115610a9f57610a9e610d8f565b5b604051908082528060200260200182016040528015610acd5781602001602082028036833780820191505090505b5060009080519060200190610ae3929190610bcc565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b11906114f6565b60006040518083038185875af1925050503d8060008114610b4e576040519150601f19603f3d011682016040523d82523d6000602084013e610b53565b606091505b5050905080610b8e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610bbd919061156a565b60405180910390a15050505050565b828054828255906000526020600020908101928215610c45579160200282015b82811115610c445782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bec565b5b509050610c529190610c56565b5090565b5b80821115610c6f576000816000905550600101610c57565b5090565b6000819050919050565b610c8681610c73565b82525050565b6000602082019050610ca16000830184610c7d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ce757610ce6610ca7565b5b50565b6000819050610cf882610cd6565b919050565b6000610d0882610cea565b9050919050565b610d1881610cfd565b82525050565b6000602082019050610d336000830184610d0f565b92915050565b6000604051905090565b600080fd5b600080fd5b610d5681610c73565b8114610d6157600080fd5b50565b600081359050610d7381610d4d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dc782610d7e565b810181811067ffffffffffffffff82111715610de657610de5610d8f565b5b80604052505050565b6000610df9610d39565b9050610e058282610dbe565b919050565b600067ffffffffffffffff821115610e2557610e24610d8f565b5b602082029050602081019050919050565b600080fd5b6000610e4e610e4984610e0a565b610def565b90508083825260208201905060208402830185811115610e7157610e70610e36565b5b835b81811015610e9a5780610e868882610d64565b845260208401935050602081019050610e73565b5050509392505050565b600082601f830112610eb957610eb8610d79565b5b8135610ec9848260208601610e3b565b91505092915050565b60008060408385031215610ee957610ee8610d43565b5b6000610ef785828601610d64565b925050602083013567ffffffffffffffff811115610f1857610f17610d48565b5b610f2485828601610ea4565b9150509250929050565b600080fd5b60008083601f840112610f4957610f48610d79565b5b8235905067ffffffffffffffff811115610f6657610f65610f2e565b5b602083019150836001820283011115610f8257610f81610e36565b5b9250929050565b60008060208385031215610fa057610f9f610d43565b5b600083013567ffffffffffffffff811115610fbe57610fbd610d48565b5b610fca85828601610f33565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100182610fd6565b9050919050565b61101181610ff6565b82525050565b600060208201905061102c6000830184611008565b92915050565b600080fd5b600067ffffffffffffffff82111561105257611051610d8f565b5b61105b82610d7e565b9050602081019050919050565b82818337600083830152505050565b600061108a61108584611037565b610def565b9050828152602081018484840111156110a6576110a5611032565b5b6110b1848285611068565b509392505050565b600082601f8301126110ce576110cd610d79565b5b81356110de848260208601611077565b91505092915050565b6000602082840312156110fd576110fc610d43565b5b600082013567ffffffffffffffff81111561111b5761111a610d48565b5b611127848285016110b9565b91505092915050565b60008115159050919050565b61114581611130565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561118557808201518184015260208101905061116a565b83811115611194576000848401525b50505050565b60006111a58261114b565b6111af8185611156565b93506111bf818560208601611167565b6111c881610d7e565b840191505092915050565b60006040820190506111e8600083018561113c565b81810360208301526111fa818461119a565b90509392505050565b6000819050919050565b61121681611203565b82525050565b6000602082019050611231600083018461120d565b92915050565b600063ffffffff82169050919050565b61125081611237565b82525050565b600060208201905061126b6000830184611247565b92915050565b60006020828403121561128757611286610d43565b5b600061129584828501610d64565b91505092915050565b60006040820190506112b36000830185611008565b6112c06020830184611008565b9392505050565b60006060820190506112dc6000830186610c7d565b6112e96020830185610c7d565b6112f66040830184610c7d565b949350505050565b600067ffffffffffffffff82169050919050565b61131b816112fe565b82525050565b600061ffff82169050919050565b61133881611321565b82525050565b600060a082019050611353600083018861120d565b6113606020830187611312565b61136d604083018661132f565b61137a6060830185611247565b6113876080830184611247565b9695505050505050565b6000815190506113a081610d4d565b92915050565b6000602082840312156113bc576113bb610d43565b5b60006113ca84828501611391565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061140d82610c73565b915061141883610c73565b92508282101561142b5761142a6113d3565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061149f82610c73565b91506114aa83610c73565b9250826114ba576114b9611465565b5b828206905092915050565b600081905092915050565b50565b60006114e06000836114c5565b91506114eb826114d0565b600082019050919050565b6000611501826114d3565b9150819050919050565b6000819050919050565b600061153061152b61152684610fd6565b61150b565b610fd6565b9050919050565b600061154282611515565b9050919050565b600061155482611537565b9050919050565b61156481611549565b82525050565b600060208201905061157f600083018461155b565b9291505056fea2646970667358221220b7dc486ca7f2291f88af9ef998dc9bbf550bcaa5e8adeae89ffd8a013e32f0ed64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806353a2c19a1161008a578063c19dd76b11610059578063c19dd76b146102b4578063de8be8e7146102df578063e55ae4e81461030a578063fd6673f514610347576100e8565b806353a2c19a146101f55780635f1b0fd8146102205780636e04ff0d1461024b57806391ad27b414610289576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063473f1ddc146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610c8c565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a9190610d1e565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610ed2565b6103b1565b005b610174610471565b005b34801561018257600080fd5b5061018b6105e0565b6040516101989190610c8c565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f89565b6105ea565b005b3480156101d657600080fd5b506101df6107e9565b6040516101ec9190611017565b60405180910390f35b34801561020157600080fd5b5061020a610813565b6040516102179190610c8c565b60405180910390f35b34801561022c57600080fd5b50610235610822565b6040516102429190610c8c565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d91906110e7565b61082f565b6040516102809291906111d3565b60405180910390f35b34801561029557600080fd5b5061029e6108dc565b6040516102ab9190610c8c565b60405180910390f35b3480156102c057600080fd5b506102c9610904565b6040516102d6919061121c565b60405180910390f35b3480156102eb57600080fd5b506102f461092c565b6040516103019190611256565b60405180910390f35b34801561031657600080fd5b50610331600480360381019061032c9190611271565b610954565b60405161033e9190611017565b60405180910390f35b34801561035357600080fd5b5061035c61099b565b6040516103699190610c8c565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045a92919061129e565b60405180910390fd5b61046d82826109a7565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104cb576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104df576104de610ca7565b5b600160149054906101000a900460ff16600181111561050157610500610ca7565b5b14610538576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006106046040518060200160405280600081525061082f565b509050806106735747600080549050600160149054906101000a900460ff16600181111561063557610634610ca7565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161066a939291906112c7565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561069857610697610ca7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076295949392919061133e565b602060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906113a6565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085757610856610ca7565b5b6000600181111561086b5761086a610ca7565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261089f9190611402565b119050600080600080549050119050600080471190508380156108bf5750825b80156108c85750815b80156108d15750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061096957610968611436565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109c2576109c1611436565b5b60200260200101516109d49190611494565b905060008082815481106109eb576109ea611436565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a7f57610a7e610ca7565b5b0217905550600067ffffffffffffffff811115610a9f57610a9e610d8f565b5b604051908082528060200260200182016040528015610acd5781602001602082028036833780820191505090505b5060009080519060200190610ae3929190610bcc565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b11906114f6565b60006040518083038185875af1925050503d8060008114610b4e576040519150601f19603f3d011682016040523d82523d6000602084013e610b53565b606091505b5050905080610b8e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df82604051610bbd919061156a565b60405180910390a15050505050565b828054828255906000526020600020908101928215610c45579160200282015b82811115610c445782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bec565b5b509050610c529190610c56565b5090565b5b80821115610c6f576000816000905550600101610c57565b5090565b6000819050919050565b610c8681610c73565b82525050565b6000602082019050610ca16000830184610c7d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ce757610ce6610ca7565b5b50565b6000819050610cf882610cd6565b919050565b6000610d0882610cea565b9050919050565b610d1881610cfd565b82525050565b6000602082019050610d336000830184610d0f565b92915050565b6000604051905090565b600080fd5b600080fd5b610d5681610c73565b8114610d6157600080fd5b50565b600081359050610d7381610d4d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dc782610d7e565b810181811067ffffffffffffffff82111715610de657610de5610d8f565b5b80604052505050565b6000610df9610d39565b9050610e058282610dbe565b919050565b600067ffffffffffffffff821115610e2557610e24610d8f565b5b602082029050602081019050919050565b600080fd5b6000610e4e610e4984610e0a565b610def565b90508083825260208201905060208402830185811115610e7157610e70610e36565b5b835b81811015610e9a5780610e868882610d64565b845260208401935050602081019050610e73565b5050509392505050565b600082601f830112610eb957610eb8610d79565b5b8135610ec9848260208601610e3b565b91505092915050565b60008060408385031215610ee957610ee8610d43565b5b6000610ef785828601610d64565b925050602083013567ffffffffffffffff811115610f1857610f17610d48565b5b610f2485828601610ea4565b9150509250929050565b600080fd5b60008083601f840112610f4957610f48610d79565b5b8235905067ffffffffffffffff811115610f6657610f65610f2e565b5b602083019150836001820283011115610f8257610f81610e36565b5b9250929050565b60008060208385031215610fa057610f9f610d43565b5b600083013567ffffffffffffffff811115610fbe57610fbd610d48565b5b610fca85828601610f33565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100182610fd6565b9050919050565b61101181610ff6565b82525050565b600060208201905061102c6000830184611008565b92915050565b600080fd5b600067ffffffffffffffff82111561105257611051610d8f565b5b61105b82610d7e565b9050602081019050919050565b82818337600083830152505050565b600061108a61108584611037565b610def565b9050828152602081018484840111156110a6576110a5611032565b5b6110b1848285611068565b509392505050565b600082601f8301126110ce576110cd610d79565b5b81356110de848260208601611077565b91505092915050565b6000602082840312156110fd576110fc610d43565b5b600082013567ffffffffffffffff81111561111b5761111a610d48565b5b611127848285016110b9565b91505092915050565b60008115159050919050565b61114581611130565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561118557808201518184015260208101905061116a565b83811115611194576000848401525b50505050565b60006111a58261114b565b6111af8185611156565b93506111bf818560208601611167565b6111c881610d7e565b840191505092915050565b60006040820190506111e8600083018561113c565b81810360208301526111fa818461119a565b90509392505050565b6000819050919050565b61121681611203565b82525050565b6000602082019050611231600083018461120d565b92915050565b600063ffffffff82169050919050565b61125081611237565b82525050565b600060208201905061126b6000830184611247565b92915050565b60006020828403121561128757611286610d43565b5b600061129584828501610d64565b91505092915050565b60006040820190506112b36000830185611008565b6112c06020830184611008565b9392505050565b60006060820190506112dc6000830186610c7d565b6112e96020830185610c7d565b6112f66040830184610c7d565b949350505050565b600067ffffffffffffffff82169050919050565b61131b816112fe565b82525050565b600061ffff82169050919050565b61133881611321565b82525050565b600060a082019050611353600083018861120d565b6113606020830187611312565b61136d604083018661132f565b61137a6060830185611247565b6113876080830184611247565b9695505050505050565b6000815190506113a081610d4d565b92915050565b6000602082840312156113bc576113bb610d43565b5b60006113ca84828501611391565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061140d82610c73565b915061141883610c73565b92508282101561142b5761142a6113d3565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061149f82610c73565b91506114aa83610c73565b9250826114ba576114b9611465565b5b828206905092915050565b600081905092915050565b50565b60006114e06000836114c5565b91506114eb826114d0565b600082019050919050565b6000611501826114d3565b9150819050919050565b6000819050919050565b600061153061152b61152684610fd6565b61150b565b610fd6565b9050919050565b600061154282611515565b9050919050565b600061155482611537565b9050919050565b61156481611549565b82525050565b600060208201905061157f600083018461155b565b9291505056fea2646970667358221220b7dc486ca7f2291f88af9ef998dc9bbf550bcaa5e8adeae89ffd8a013e32f0ed64736f6c63430008080033",
  "devdoc": {
    "author": "Roberto Iturralde",
    "details": "This implements Chainlink's VRF and Chainlink Automation",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Chainlink Keeper function that verifies if upkeep is neededWhen upkeep is needed, it will call performUpkeepupkeep needed once all of these are TRUE:1. s_raffleState is 'OPEN'2. Time passed is greater than interval3. There's players in the raffle4. There's balance in the contract"
      }
    },
    "title": "A sample Raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable raffle smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 871,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 888,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)866"
      },
      {
        "astId": 893,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)866": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}